# = Animatron
# :toc:

# [[info]]
#################################################################################
# == Getting Info
#################################################################################
# [[list-commands]]
# === List all commands
# Lists all available commands.
#
# .Usage
#
#   /commands
#
/def /commands
     /commands/list

# === List assets available on disk.
# List all available animation clips that are on the current assets path.
#
# This list includes all clips that are on the disk, no matter if they are loaded or not.
#
# See also: <<list-animations,`/animations`>>
#
# .Usage
#
#   /assets
#
/def /assets
     /assets/list

# [[list-animations]]
# === List animations
# List all animations that are loaded to memory.
#
# .Usage
#
#   /animations
#
/def /animations
     /animations/list

# [[list-actors]]
# === List actors
# List all actors that have been created.
#
# .Usage
#
#   /actors
#
/def /actors
     /actors/list

[[actors]]
#################################################################################
# == Actor Management
#################################################################################
# === Loading assets
# Load a preset from `user://presets/`.
#
# .Arguments
# - `name` (_String_) - relative path to the file from `user://presets/`.
#
# .Usage
#   /commands/load mycommands/somecommands.ocl
#
/def /preset name:s
     /commands/load presets/$name.ocl
     /$name

# === Create
# Load and create a new *actor* with an *animation*.
#
# NOTE: the *animation* will be loaded if it isn't already.
#
# .Arguments
# - `actor` (_String_) - whatever name you want to give to the actor.
# - `animation` (_String_) - whatever name you want to give to the actor.
#
# .Usage
#   /new lola mama
#
/def /new actor:s animation:s
     /load $animation
     /create $actor $animation

# === Delete
# Delete the *actor*.
#
# .Arguments
# - `actor` (_String_) - any existing actor.
#
# .Usage
#   /free lola
#
# or
#
#   /delete lola
#
/def /free actor:s
     /remove $actor
/def /delete actor:s
     /remove $actor

# === Reload
# Reload *animation* frames from disk.
#
# .Arguments
# - `animation` (_String_) - name of the asset.
#
# .Usage
#   /reload mama
#
/def /reload animation:s
     /unload $animation
     /load $animation

#################################################################################
# == Transform
#################################################################################
# === Position
# Set the *x* and *y* coordinates (in pixels) of the *actor*.
#
# .Arguments
# - `actor` (_String_) - name of the actor.
# - `x` (_float_) - position in the *x* axis in pixels.
# - `y` (_float_) - position in the *y* axis in pixels.
#
# .Usage
#   /position lola 500 500
#
/def /position actor:s x:f y:f
     /method /set/position $actor $x $y

# or
#   /pos mama 500 500
#
/def /pos actor:s x:f y:f
     /position $actor $x $y

# === Position in the X axis
# Set the *x* coordinate (in pixels) of the *actor*.
#
# .Arguments
# - `actor` (_String_) - name of the actor.
# - `x` (_float_) - position in the *x* axis in pixels.
#
# .Usage
#   /position/x lola 500
#
/def /position/x actor:s x:f
     /property /position/x $actor $x

# or
#
#   /pos/x mama 500
#
/def /pos/x actor:s value:f
     /position/x $actor $value

# or
#
#   /x mama 500
#
/def /x actor:s value:f
     /position/x $actor $value

# === Position in the Y axis
# Set the *y* coordinate (in pixels) of the *actor*.
#
# .Arguments
# - `actor` (_String_) - name of the actor.
# - `y` (_float_) - position in the *y* axis in pixels.
#
# .Usage
#   /position/x lola 500
#
/def /position/y actor:s y:f
     /property /position/y $actor $y

# or
#
#   /pos/y mama 500
#
/def /pos/y actor:s value:f
     /position/y $actor $value

# or
#
#   /y mama 500
#
/def /y actor:s value:f
     /position/y $actor $value

# === Move
# Move *actor* relative to the current position in both *x* and *y* axis.
#
# .Arguments
# - `actor` (_String_) - name of the actor
# - `x` (_float_) - Position in *pixels* of the actor on the *x* axis
# - `y` (_float_) - Position in *pixels* of the actor on the *y* axis
#
# .Usage
#   /move lola 100 100
#
/def /move actor:s x:f y:f
     /method /translate $actor $x $y

# === Move on the X axis
# Move *actor* relative to the current position in the *x* axis.
#
# .Arguments
# - `actor` (_String_) - name of the actor
# - `x` (_float_) - Position in *pixels* of the actor on the *x* axis
#
# .Usage
#   /move/x lola 100
#
/def /move/x actor:s x:f
     /method /translate $actor $x 0

# === Move on the Y axis
# Move *actor* relative to the current position in the *y* axis.
#
# .Arguments
# - `actor` (_String_) - name of the actor
# - `y` (_float_) - Position in *pixels* of the actor on the *y* axis
#
# .Usage
#   /move/y lola 100
#
/def /move/y actor:s y:f
     /method /translate $actor 0 $y

# === Angle
# Set the rotation of the *actor* in *degrees*.
#
# .Arguments
# - `actor` (_String_) - name of the actor
# - `degrees` (_String_) - angle in *degrees*
#
# .Usage
#   /angle lola 45
#
/def /angle actor:s degrees:f
     /property /rotation/degrees $actor $degrees

# === Rotate
# Rotate the *actor* some *degrees* relative to the current angle.
#
# .Arguments
# - `actor` (_String_) - name of the actor
# - `degrees` (_String_) - angle in *degrees*
#
# .Usage
#   /rotate lola 10
#
/def /rotate actor:s degrees:f
     /property/relative /rotation/degrees $actor $degrees

# === Size
# Set the *actor*'s *size* relative to the normal size.
#
# .Arguments
# - `actor` (_String_) - name of the actor
# - `size` (_float_) - size of the actor. `1` is normal size.
#
# .Usage
#    /size lola 1.5
#
/def /size actor:s size:f
     /property /scale $actor $size $size

# === Size X and Y
# Set the *actor*'s *size* relative to the normal size with different values on
# the *x* and *y* axis.
#
# .Arguments
# - `actor` (_String_) - name of the actor
# - `x` (_float_) - size of the actor on the X axis.
# - `y` (_float_) - size of the actor on the Y axis.
#
# .Usage
#    /size/xy lola 1.5 0.7
#
/def /size/xy actor:s x:f y:f
     /property /scale $actor $x $y

# === Size X
# Set the *actor*'s *size* relative to the normal size on the *x* axis.
#
# .Arguments
# - `actor` (_String_) - name of the actor
# - `x` (_float_) - size of the actor on the X axis.
#
# .Usage
#    /size/x lola 1.5 0.7
#
/def /size/x actor:s x:f
     /property /scale/x $actor $x

# === Size Y
# Set the *actor*'s *size* relative to the normal size on the *y* axis.
#
# .Arguments
# - `actor` (_String_) - name of the actor
# - `y` (_float_) - size of the actor on the Y axis.
#
# .Usage
#    /size/y lola 1.5 0.7
#
/def /size/y actor:s y:f
     /property /scale/y $actor $y

# SCALE the ACTOR relative to the current size
/def /scale actor:s scale:f
     /method /apply/scale $actor $scale $scale

# SCALE the ACTOR relative to the current size on both axis X and Y
/def /scale/xy actor:s x:f y:f
     /method /apply/scale $actor $x $y

# SCALE the ACTOR relative to the current size on the X axis
/def /scale/x actor:s x:f
     /method /apply/scale $actor $x 1

# SCALE the ACTOR relative to the current size on the Y axis
/def /scale/y actor:s y:f
     /method /apply/scale $actor 1 $y

#################################################################################
# visibility                                                                    #
#################################################################################
# Make the ACTOR visible
/def /show actor:s
     /method /show $actor

# Make the ACTOR invisible
/def /hide actor:s
     /method /hide $actor

#################################################################################
# color                                                                         #
#################################################################################
/def /color/r actor:s value:f
     /color $actor $value 0 0

/def /color/g actor:s value:f
     /color $actor 0 $value 0

/def /color/b actor:s value:f
     /color $actor 0 0 $value

#################################################################################
# animation                                                                     #
#################################################################################
# Play the ACTOR's animation
/def /play actor:s
     /animation/method /play $actor

# Play the ACTOR's animation backwards
/def /backwards actor:s
     /animation/method /play/backwards $actor

# Stop the ACTOR's animation
/def /stop actor:s
     /animation/method /stop $actor

# Play the animation from START to END frames.
/def /play/range actor:s start:i end:i
     /start/frame $actor $start
     /end/frame $actor $end

# Set the ACTOR's ANIMATION.
/def /animation actor:s animation:s
     /animation/method /set/animation $actor $animation

# See /animation
/def /anim actor:s animation:s
     /animation $actor $animation

# Set the ACTOR's animation SPEED (1 = normal speed, 2 = 2 x speed).
/def /speed actor:s speed:f
     /animation/method /set/speed/scale $actor $speed

# Set the ACTOR's current FRAME.
/def /frame actor:s frame:f
     /animation/property /frame $actor $frame

# Set the ACTOR's current FRAME.
/def /frame actor:s frame:f
     /animation/property /frame $actor $frame

# Set the first FRAME of the loop in ACTOR's animation. Defaults to 0.
/def /start/frame actor:s frame:f
     /animation/property /start/frame $actor $frame

# Set the last FRAME of the loop in ACTOR's animation.
# Defaults to number of frames of the animation.
/def /end/frame actor:s frame:f
     /animation/property /end/frame $actor $frame

# Loop the ACTOR's animation
/def /loop actor:s
     /play $actor
     /animation/frames/method /set/animation/loop $actor 1

# Don't loop the ACTOR's animation
/def /noloop actor:s
     /animation/frames/method /set/animation/loop $actor 0

# Set the ACTOR's animation drawing offset in pixels.
/def /offset actor:s x:i y:i
	/animation/property /offset $actor $x $y

# Set the ACTOR's animation drawing offset on the X axis.
/def /offset/x actor:s pixels:i
	/animation/property /offset/x $actor $x

# Set the ACTOR's animation drawing offset on the Y axis.
/def /offset/y actor:s pixels:i
	/animation/property /offset/y $actor $y

#################################################################################
# text label                                                                    #
#################################################################################
/def /type actor:s text:...
     /text/property /text $actor $text

#################################################################################
# editor                                                                        #
#################################################################################
/def /editor/font/size pixels
     /editor/property /font/size $pixels

#################################################################################
# extras                                                                        #
#################################################################################
# Creates a pair of 2 ANIMATIONs into a single "object" with a NAME.
# This allows to create actors with separate line and fill colors.
/def /comic name:s animation:s
     /create $name $animation-fl
     /create $name-ln $animation-ln
     /parent $name-ln $name
